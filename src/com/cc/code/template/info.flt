package service

import java.util
import javax.inject.Inject

import dao.${className_d}Dao
import model.Model.${className_d}Model
import model.Type.${className_d}Type
import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.Future

/**
  * Created by bigcong
  */
class ${className_d}Service @Inject()(${className_x}Dao: ${className_d}Dao) {
  /**
    *
    * 统筹查询
    * @param ${className_x}Model
    * @return
    */
  def list(${className_x}Model: ${className_d}Model) = {
    val list = ${className_x}Dao.list(${className_x}Model)
    for {
      l <- list
    } yield {
      val c = new util.ArrayList[${className_d}Model]();
      for (i <- l) {
        c.add(${className_d}Model.tupled(i))
      }
      c
    }
  }

  /**
    * 插入
    * @param ${className_x}Model
    * @return
    */
  def insert(${className_x}Model: ${className_d}Model) = {
    ${className_x}Model.${key_x} = 0
    ${className_x}Dao.insertOrUpdate(${className_d}Model.asInstanceOf[${className_d}Type])
  }

  /**
    * 跟新
    * @param ${className_x}Model
    * @return
    */
  def update(${className_x}Model: ${className_d}Model) = {
    if (${className_x}Model.${key_x}!= 0) {
      val dbModel: Future[${className_d}Model] = get(${className_x}Model.${key_x})
      for (db <- dbModel) yield {
       <#list tableCarrays as tableCarray>
                       <#if tableCarray.carrayType=="String">
          if (!${className_x}Model.${tableCarray.carrayName_x}.equals("")) {
                       <#else>
          if (${className_x}Model.${tableCarray.carrayName_x}!=0) {
                        </#if>
               db.${tableCarray.carrayName_x}=${className_x}Model.${tableCarray.carrayName_x}
          }
          </#list>
        ${className_x}Dao.insertOrUpdate(db.asInstanceOf[${className_d}Type])
      }
    }
  }

  /**
    * 获取一条纪录
    * @param ${key_x}
    * @return
    */
  def get(${key_x}: Int) = {
    val get = ${className_x}Dao.get(${key_x})
    for {
      l <- get
    } yield {
      ${className_d}Model.tupled(l.apply(0))
    }
  }


}
