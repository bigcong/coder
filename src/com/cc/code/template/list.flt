package controllers

import java.util
import javax.inject.Inject

import model.Model.${className_d}Model
import org.json4s.DefaultFormats
import play.api.mvc.{Action, Controller}
import service.${className_d}Service
import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.Future

/**
  * Created by bigcong on 15/12/9.
  */
class ${className_d}Controller @Inject()(${className_x}Service: ${className_d}Service) extends Controller {
  /**
    *
    * 统筹查询
    * @return
    */
  def list = Action.async {
    implicit request =>
      val model = new ${className_d}Model;
        <#list tableCarrays as tableCarray>
                       <#if tableCarray.carrayType=="String">
                 model.${tableCarray.carrayName_x} = request.getQueryString("${tableCarray.carrayName_x}").getOrElse("")
                       <#else>
                 model.${tableCarray.carrayName_x} = request.getQueryString("${tableCarray.carrayName_x}").getOrElse("0").to${tableCarray.carrayType}
                        </#if>
        </#list>

      val list: Future[util.ArrayList[${className_d}Model]] = ${className_x}Service.list(model)
      for {
        l <- list
      } yield {
        val json = org.json4s.jackson.Json(DefaultFormats).write(l);
        Ok(json)
      }

  }

  def insert = Action.async {
    implicit request =>
      val model = new ${className_d}Model;
      <#list tableCarrays as tableCarray>
                       <#if tableCarray.carrayType=="String">
          model.${tableCarray.carrayName_x} = request.getQueryString("${tableCarray.carrayName_x}").getOrElse("")
                       <#else>
          model.${tableCarray.carrayName_x} = request.getQueryString("${tableCarray.carrayName_x}").getOrElse("0").to${tableCarray.carrayType}
                        </#if>
        </#list>
      val insert: Future[Int] = ${className_x}Service.insert(model)
      for {
        l <- insert
      } yield {
        Ok(l + "")
      }
  }

  def update = Action.async {
    implicit request =>
      val model = new ${className_d}Model;
      <#list tableCarrays as tableCarray>
                            <#if tableCarray.carrayType=="String">
          model.${tableCarray.carrayName_x} = request.getQueryString("${tableCarray.carrayName_x}").getOrElse("")
                            <#else>
          model.${tableCarray.carrayName_x} = request.getQueryString("${tableCarray.carrayName_x}").getOrElse("0").to${tableCarray.carrayType}
                             </#if>
             </#list>
      if (model.${key_x} == 0) {
        Future {
          Ok(org.json4s.jackson.Json(DefaultFormats).write(Map("message" -> "${key_x} 不能为空", "status" -> "0")))
        }
      } else {
        ${className_x}Service.update(model)
        Future {
          Ok(org.json4s.jackson.Json(DefaultFormats).write(Map("message" -> "更新成功", "status" -> "1")))
        }
      }
  }
  def get(${key_x}: Int) = Action.async {
    val get = ${className_x}Service.get(${key_x});
    for {
      l <- get
    } yield {
      Ok(org.json4s.jackson.Json(DefaultFormats).write(l))
    }
  }

}
